def total_time(matrix, i: int = 0):
    infected = [mi for mi in range(len(matrix)) if matrix[mi][mi] == 0]
    if len(infected) == len(matrix):
        return i
    friends = [[(ii, mi) for mi in range(len(matrix))
                if mi != ii and matrix[ii][mi] == 1]
               for ii in infected]
    route = set(infected)
    for friend in friends:
        for row, col in friend:
            if col not in route:
                route.add(col)
                matrix[col][col] -= 1
    return total_time(matrix, i + 1)


def capture(matrix):
    return total_time(matrix)


if __name__ == '__main__':
    # These "asserts" using only for self-checking and not necessary for auto-testing
    assert capture([[0, 1, 0, 1, 0, 1],
                    [1, 8, 1, 0, 0, 0],
                    [0, 1, 2, 0, 0, 1],
                    [1, 0, 0, 1, 1, 0],
                    [0, 0, 0, 1, 3, 1],
                    [1, 0, 1, 0, 1, 2]]) == 8, "Base example"
    assert capture([[0, 1, 0, 1, 0, 1],
                    [1, 1, 1, 0, 0, 0],
                    [0, 1, 2, 0, 0, 1],
                    [1, 0, 0, 1, 1, 0],
                    [0, 0, 0, 1, 3, 1],
                    [1, 0, 1, 0, 1, 2]]) == 4, "Low security"
    assert capture([[0, 1, 1],
                    [1, 9, 1],
                    [1, 1, 9]]) == 9, "Small"
    assert capture([[0, 1, 0],
                    [1, 9, 1],
                    [0, 1, 9]]) == 18, "Edge 2"
    assert capture([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 2, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 3, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 4, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 5, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 6, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 7, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 8, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 9]]) == 9, "Edge 4"
    assert capture([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 2, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 3, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 4, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 5, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 6, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, 7, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1, 8, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 9]]) == 45, "Edge 5"
    assert capture([[0, 0, 1, 1, 0, 0, 0, 0, 0],
                    [0, 6, 0, 1, 0, 0, 0, 0, 1],
                    [1, 0, 9, 1, 0, 1, 0, 0, 0],
                    [1, 1, 1, 7, 1, 0, 0, 1, 0],
                    [0, 0, 0, 1, 2, 1, 1, 1, 0],
                    [0, 0, 1, 0, 1, 8, 1, 1, 0],
                    [0, 0, 0, 0, 1, 1, 9, 0, 1],
                    [0, 0, 0, 1, 1, 1, 0, 7, 0],
                    [0, 1, 0, 0, 0, 0, 1, 0, 9]]) == 22, "Extra 2"
    assert capture([[0, 1, 0, 1, 0, 0, 0, 1],
                    [1, 2, 1, 1, 0, 1, 1, 1],
                    [0, 1, 6, 0, 1, 1, 0, 0],
                    [1, 1, 0, 1, 1, 1, 1, 0],
                    [0, 0, 1, 1, 1, 0, 0, 1],
                    [0, 1, 1, 1, 0, 9, 0, 0],
                    [0, 1, 0, 1, 0, 0, 6, 0],
                    [1, 1, 0, 0, 1, 0, 0, 6]]) == 10, "Extra 3"
    assert capture([[0, 0, 1, 0, 0, 0, 0, 1],
                    [0, 5, 1, 0, 1, 1, 0, 0],
                    [1, 1, 8, 0, 1, 0, 1, 1],
                    [0, 0, 0, 6, 1, 0, 1, 1],
                    [0, 1, 1, 1, 2, 0, 0, 0],
                    [0, 1, 0, 0, 0, 5, 1, 0],
                    [0, 0, 1, 1, 0, 1, 5, 0],
                    [1, 0, 1, 1, 0, 0, 0, 4]]) == 18, "Extra 4"
    print('Ok!')
